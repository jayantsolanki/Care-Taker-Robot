
xbeenew.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800200  00800200  00000572  2**0
                  ALLOC
  2 .stab         000006e4  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008a6  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001f8  00000000  00000000  00001606  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000425  00000000  00000000  000017fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002cc  00000000  00000000  00001c24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002fa  00000000  00000000  00001ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014a  00000000  00000000  000021ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 bc 01 	jmp	0x378	; 0x378 <__vector_25>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee ef       	ldi	r30, 0xFE	; 254
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a1 30       	cpi	r26, 0x01	; 1
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 76 02 	call	0x4ec	; 0x4ec <main>
 122:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <timer5_init>:

unsigned char data; //to store received data from UDR1
void velocity(unsigned char, unsigned char);
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
 12a:	e1 e2       	ldi	r30, 0x21	; 33
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
 13c:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
 140:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
 144:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
 148:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
 14c:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
 150:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
 154:	89 ea       	ldi	r24, 0xA9	; 169
 156:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
 15a:	8b e0       	ldi	r24, 0x0B	; 11
 15c:	80 83       	st	Z, r24
}
 15e:	08 95       	ret

00000160 <velocity>:
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 160:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
 164:	60 93 2a 01 	sts	0x012A, r22
}
 168:	08 95       	ret

0000016a <motion_set>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 			// removing upper nibbel as it is not needed
	PortARestore = PORTA; 			// reading the PORTA's original status
 16a:	92 b1       	in	r25, 0x02	; 2
	PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
 16c:	90 7f       	andi	r25, 0xF0	; 240
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 16e:	8f 70       	andi	r24, 0x0F	; 15
	PortARestore = PORTA; 			// reading the PORTA's original status
	PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
	PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
 170:	98 2b       	or	r25, r24
	PORTA = PortARestore; 			// setting the command to the port
 172:	92 b9       	out	0x02, r25	; 2
}
 174:	08 95       	ret

00000176 <buzzer_pin_config>:
void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
 176:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
 178:	43 98       	cbi	0x08, 3	; 8
}
 17a:	08 95       	ret

0000017c <motion_pin_config>:

void motion_pin_config (void)
{
 DDRA = DDRA | 0x0F;
 17c:	81 b1       	in	r24, 0x01	; 1
 17e:	8f 60       	ori	r24, 0x0F	; 15
 180:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
 182:	82 b1       	in	r24, 0x02	; 2
 184:	80 7f       	andi	r24, 0xF0	; 240
 186:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
 188:	ea e0       	ldi	r30, 0x0A	; 10
 18a:	f1 e0       	ldi	r31, 0x01	; 1
 18c:	80 81       	ld	r24, Z
 18e:	88 61       	ori	r24, 0x18	; 24
 190:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
 192:	eb e0       	ldi	r30, 0x0B	; 11
 194:	f1 e0       	ldi	r31, 0x01	; 1
 196:	80 81       	ld	r24, Z
 198:	88 61       	ori	r24, 0x18	; 24
 19a:	80 83       	st	Z, r24
}
 19c:	08 95       	ret

0000019e <led_pin_config>:

void led_pin_config (void)
{
	DDRH = DDRH | 0x70;		//Setting PORTH 4,5,6 as output
 19e:	e1 e0       	ldi	r30, 0x01	; 1
 1a0:	f1 e0       	ldi	r31, 0x01	; 1
 1a2:	80 81       	ld	r24, Z
 1a4:	80 67       	ori	r24, 0x70	; 112
 1a6:	80 83       	st	Z, r24
	DDRL = DDRL | 0xC0;     //Setting PORTL as output
 1a8:	ea e0       	ldi	r30, 0x0A	; 10
 1aa:	f1 e0       	ldi	r31, 0x01	; 1
 1ac:	80 81       	ld	r24, Z
 1ae:	80 6c       	ori	r24, 0xC0	; 192
 1b0:	80 83       	st	Z, r24
}
 1b2:	08 95       	ret

000001b4 <led1_pin_config>:
//LED


void led1_pin_config (void)
{
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
 1b4:	25 9a       	sbi	0x04, 5	; 4
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
 1b6:	2d 9a       	sbi	0x05, 5	; 5
}
 1b8:	08 95       	ret

000001ba <led2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void led2_pin_config (void)
{
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
 1ba:	26 9a       	sbi	0x04, 6	; 4
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
 1bc:	2e 9a       	sbi	0x05, 6	; 5
}
 1be:	08 95       	ret

000001c0 <led3_pin_config>:

//Configure PORTB 7 pin for servo motor 3 operation
void led3_pin_config (void)
{
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
 1c0:	27 9a       	sbi	0x04, 7	; 4
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
 1c2:	2f 9a       	sbi	0x05, 7	; 5
}
 1c4:	08 95       	ret

000001c6 <timer1_init>:
//prescale:256
// WGM: 7) PWM 8bit fast, TOP=0x00FF
// actual value: 52.25Hz 
void timer1_init()
{
	TCCR1B = 0x00;	//Stop
 1c6:	e1 e8       	ldi	r30, 0x81	; 129
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	10 82       	st	Z, r1
	TCNT1H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
 1cc:	8f ef       	ldi	r24, 0xFF	; 255
 1ce:	80 93 85 00 	sts	0x0085, r24
	TCNT1L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	90 93 84 00 	sts	0x0084, r25
	OCR1AH = 0x00;	//Output compare register high value for Left Motor
 1d8:	10 92 89 00 	sts	0x0089, r1
	OCR1AL = 0xFF;	//Output compare register low value for Left Motor
 1dc:	80 93 88 00 	sts	0x0088, r24
	OCR1BH = 0x00;	//Output compare register high value for Right Motor
 1e0:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL = 0xFF;	//Output compare register low value for Right Motor
 1e4:	80 93 8a 00 	sts	0x008A, r24
	OCR1CH = 0x00;	//Output compare register high value for Motor C1
 1e8:	10 92 8d 00 	sts	0x008D, r1
	OCR1CL = 0xFF;	//Output compare register low value for Motor C1
 1ec:	80 93 8c 00 	sts	0x008C, r24
	TCCR1A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
 1f0:	89 ea       	ldi	r24, 0xA9	; 169
 1f2:	80 93 80 00 	sts	0x0080, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR1B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
 1f6:	8b e0       	ldi	r24, 0x0B	; 11
 1f8:	80 83       	st	Z, r24
}
 1fa:	08 95       	ret

000001fc <led_control>:


//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void led_control(unsigned char value1,unsigned char value2,unsigned char value3)  
{
 OCR1AH = 0x00;
 1fc:	10 92 89 00 	sts	0x0089, r1
 OCR1AL = (unsigned char) value1;
 200:	80 93 88 00 	sts	0x0088, r24
 OCR1BH = 0x00;
 204:	10 92 8b 00 	sts	0x008B, r1
 OCR1BL = (unsigned char) value2;
 208:	60 93 8a 00 	sts	0x008A, r22
 OCR1CH = 0x00;
 20c:	10 92 8d 00 	sts	0x008D, r1
 OCR1CL = (unsigned char) value3;
 210:	40 93 8c 00 	sts	0x008C, r20
 }
 214:	08 95       	ret

00000216 <red_led1_on>:
 
 void red_led1_on(void)
 {
   led_control(240,0,0);
 216:	80 ef       	ldi	r24, 0xF0	; 240
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <led_control>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 220:	8f ef       	ldi	r24, 0xFF	; 255
 222:	9f e7       	ldi	r25, 0x7F	; 127
 224:	a6 e1       	ldi	r26, 0x16	; 22
 226:	81 50       	subi	r24, 0x01	; 1
 228:	90 40       	sbci	r25, 0x00	; 0
 22a:	a0 40       	sbci	r26, 0x00	; 0
 22c:	e1 f7       	brne	.-8      	; 0x226 <red_led1_on+0x10>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <red_led1_on+0x1a>
 230:	00 00       	nop
   _delay_ms(500);
 } 
 232:	08 95       	ret

00000234 <green_led1_on>:
 
 void green_led1_on(void)
 {
	 led_control(0,240,0);
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	60 ef       	ldi	r22, 0xF0	; 240
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <led_control>
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	9f e7       	ldi	r25, 0x7F	; 127
 242:	a6 e1       	ldi	r26, 0x16	; 22
 244:	81 50       	subi	r24, 0x01	; 1
 246:	90 40       	sbci	r25, 0x00	; 0
 248:	a0 40       	sbci	r26, 0x00	; 0
 24a:	e1 f7       	brne	.-8      	; 0x244 <green_led1_on+0x10>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <green_led1_on+0x1a>
 24e:	00 00       	nop
	 _delay_ms(500);
}
 250:	08 95       	ret

00000252 <blue_led1_on>:
 
 void blue_led1_on(void)
 {
	 led_control(0,0,240);
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	60 e0       	ldi	r22, 0x00	; 0
 256:	40 ef       	ldi	r20, 0xF0	; 240
 258:	0e 94 fe 00 	call	0x1fc	; 0x1fc <led_control>
 25c:	8f ef       	ldi	r24, 0xFF	; 255
 25e:	9f e7       	ldi	r25, 0x7F	; 127
 260:	a6 e1       	ldi	r26, 0x16	; 22
 262:	81 50       	subi	r24, 0x01	; 1
 264:	90 40       	sbci	r25, 0x00	; 0
 266:	a0 40       	sbci	r26, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <blue_led1_on+0x10>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <blue_led1_on+0x1a>
 26c:	00 00       	nop
	 _delay_ms(500);
 }
 26e:	08 95       	ret

00000270 <yellow_led1_on>:
 
 void yellow_led1_on(void)
 {
	 led_control(255,255,0);
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	6f ef       	ldi	r22, 0xFF	; 255
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	0e 94 fe 00 	call	0x1fc	; 0x1fc <led_control>
 27a:	8f ef       	ldi	r24, 0xFF	; 255
 27c:	9f e7       	ldi	r25, 0x7F	; 127
 27e:	a6 e1       	ldi	r26, 0x16	; 22
 280:	81 50       	subi	r24, 0x01	; 1
 282:	90 40       	sbci	r25, 0x00	; 0
 284:	a0 40       	sbci	r26, 0x00	; 0
 286:	e1 f7       	brne	.-8      	; 0x280 <yellow_led1_on+0x10>
 288:	00 c0       	rjmp	.+0      	; 0x28a <yellow_led1_on+0x1a>
 28a:	00 00       	nop
	 _delay_ms(500);
 }
 28c:	08 95       	ret

0000028e <led1_off>:
 void led1_off(void)
 {
 led_control(0,0,0);
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	40 e0       	ldi	r20, 0x00	; 0
 294:	0e 94 fe 00 	call	0x1fc	; 0x1fc <led_control>
 298:	8f ef       	ldi	r24, 0xFF	; 255
 29a:	9f e7       	ldi	r25, 0x7F	; 127
 29c:	a6 e1       	ldi	r26, 0x16	; 22
 29e:	81 50       	subi	r24, 0x01	; 1
 2a0:	90 40       	sbci	r25, 0x00	; 0
 2a2:	a0 40       	sbci	r26, 0x00	; 0
 2a4:	e1 f7       	brne	.-8      	; 0x29e <led1_off+0x10>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <led1_off+0x1a>
 2a8:	00 00       	nop
   _delay_ms(500);
 } 
 2aa:	08 95       	ret

000002ac <red_led2_on>:
void red_led2_on (void)
{
	
	PORTL = 0x40;     //to turn on LED
 2ac:	80 e4       	ldi	r24, 0x40	; 64
 2ae:	80 93 0b 01 	sts	0x010B, r24
}
 2b2:	08 95       	ret

000002b4 <green_led2_on>:
void green_led2_on (void)
{
	
	PORTL = 0x80;     //to turn on LED
 2b4:	80 e8       	ldi	r24, 0x80	; 128
 2b6:	80 93 0b 01 	sts	0x010B, r24
}
 2ba:	08 95       	ret

000002bc <blue_led2_on>:
void blue_led2_on (void)
{
	
	PORTH = 0x40;     //to turn on LED
 2bc:	80 e4       	ldi	r24, 0x40	; 64
 2be:	80 93 02 01 	sts	0x0102, r24
}
 2c2:	08 95       	ret

000002c4 <yellow_led2_on>:
void yellow_led2_on (void)
{
	
	PORTL = 0xC0;     //to turn on LED
 2c4:	80 ec       	ldi	r24, 0xC0	; 192
 2c6:	80 93 0b 01 	sts	0x010B, r24
}
 2ca:	08 95       	ret

000002cc <led2_off>:

void led2_off (void)
{
	
	PORTH = 0x00;     //to turn on LED
 2cc:	10 92 02 01 	sts	0x0102, r1
	PORTL = 0x00;
 2d0:	10 92 0b 01 	sts	0x010B, r1
}
 2d4:	08 95       	ret

000002d6 <forward>:

void forward (void) //both wheels forward
{
	motion_set(0x06);
 2d6:	86 e0       	ldi	r24, 0x06	; 6
 2d8:	0e 94 b5 00 	call	0x16a	; 0x16a <motion_set>
}
 2dc:	08 95       	ret

000002de <back>:

void back (void) //both wheels backward
{
	motion_set(0x09);
 2de:	89 e0       	ldi	r24, 0x09	; 9
 2e0:	0e 94 b5 00 	call	0x16a	; 0x16a <motion_set>
}
 2e4:	08 95       	ret

000002e6 <left>:

void left (void) //Left wheel backward, Right wheel forward
{
	motion_set(0x05);
 2e6:	85 e0       	ldi	r24, 0x05	; 5
 2e8:	0e 94 b5 00 	call	0x16a	; 0x16a <motion_set>
}
 2ec:	08 95       	ret

000002ee <right>:

void right (void) //Left wheel forward, Right wheel backward
{
	motion_set(0x0A);
 2ee:	8a e0       	ldi	r24, 0x0A	; 10
 2f0:	0e 94 b5 00 	call	0x16a	; 0x16a <motion_set>
}
 2f4:	08 95       	ret

000002f6 <fast_left>:

void fast_left(void)
{
	motion_set(0x05);
 2f6:	85 e0       	ldi	r24, 0x05	; 5
 2f8:	0e 94 b5 00 	call	0x16a	; 0x16a <motion_set>
}
 2fc:	08 95       	ret

000002fe <fast_right>:

void fast_right(void)
{
	
	motion_set(0x0A);
 2fe:	8a e0       	ldi	r24, 0x0A	; 10
 300:	0e 94 b5 00 	call	0x16a	; 0x16a <motion_set>
}
 304:	08 95       	ret

00000306 <soft_left>:

void soft_left (void) //Left wheel stationary, Right wheel forward
{
	motion_set(0x04);
 306:	84 e0       	ldi	r24, 0x04	; 4
 308:	0e 94 b5 00 	call	0x16a	; 0x16a <motion_set>
}
 30c:	08 95       	ret

0000030e <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
	motion_set(0x02);
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	0e 94 b5 00 	call	0x16a	; 0x16a <motion_set>
}
 314:	08 95       	ret

00000316 <soft_left_2>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
	motion_set(0x01);
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 b5 00 	call	0x16a	; 0x16a <motion_set>
}
 31c:	08 95       	ret

0000031e <soft_right_2>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
	motion_set(0x08);
 31e:	88 e0       	ldi	r24, 0x08	; 8
 320:	0e 94 b5 00 	call	0x16a	; 0x16a <motion_set>
}
 324:	08 95       	ret

00000326 <stop>:


void stop (void) //hard stop
{
	motion_set(0x00);
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	0e 94 b5 00 	call	0x16a	; 0x16a <motion_set>
}
 32c:	08 95       	ret

0000032e <port_init>:

//Function to initialize ports
void port_init()
{
	motion_pin_config();
 32e:	0e 94 be 00 	call	0x17c	; 0x17c <motion_pin_config>
	buzzer_pin_config();
 332:	0e 94 bb 00 	call	0x176	; 0x176 <buzzer_pin_config>
	led_pin_config();
 336:	0e 94 cf 00 	call	0x19e	; 0x19e <led_pin_config>
	led1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
 33a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <led1_pin_config>
	led2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation
 33e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <led2_pin_config>
	led3_pin_config(); //Configure PORTB 7 pin for servo motor 3 operation
 342:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <led3_pin_config>
}
 346:	08 95       	ret

00000348 <buzzer_on>:

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
 348:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
 34a:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
 34c:	88 b9       	out	0x08, r24	; 8
}
 34e:	08 95       	ret

00000350 <buzzer_off>:

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
 350:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
 352:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
 354:	88 b9       	out	0x08, r24	; 8
}
 356:	08 95       	ret

00000358 <uart0_init>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
 UCSR0B = 0x00; //disable while setting baud rate
 358:	e1 ec       	ldi	r30, 0xC1	; 193
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	10 82       	st	Z, r1
 UCSR0A = 0x00;
 35e:	10 92 c0 00 	sts	0x00C0, r1
 UCSR0C = 0x06;
 362:	86 e0       	ldi	r24, 0x06	; 6
 364:	80 93 c2 00 	sts	0x00C2, r24
// UBRR0L = 0x47; //11059200 Hz
 UBRR0L = 0x5F; // 14745600 Hzset baud rate lo
 368:	8f e5       	ldi	r24, 0x5F	; 95
 36a:	80 93 c4 00 	sts	0x00C4, r24
 UBRR0H = 0x00; //set baud rate hi
 36e:	10 92 c5 00 	sts	0x00C5, r1
 UCSR0B = 0x98;
 372:	88 e9       	ldi	r24, 0x98	; 152
 374:	80 83       	st	Z, r24
}
 376:	08 95       	ret

00000378 <__vector_25>:


SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
 378:	1f 92       	push	r1
 37a:	0f 92       	push	r0
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	0f 92       	push	r0
 380:	0b b6       	in	r0, 0x3b	; 59
 382:	0f 92       	push	r0
 384:	11 24       	eor	r1, r1
 386:	2f 93       	push	r18
 388:	3f 93       	push	r19
 38a:	4f 93       	push	r20
 38c:	5f 93       	push	r21
 38e:	6f 93       	push	r22
 390:	7f 93       	push	r23
 392:	8f 93       	push	r24
 394:	9f 93       	push	r25
 396:	af 93       	push	r26
 398:	bf 93       	push	r27
 39a:	ef 93       	push	r30
 39c:	ff 93       	push	r31
	data = UDR0; 				//making copy of data from UDR0 in 'data' variable 
 39e:	e6 ec       	ldi	r30, 0xC6	; 198
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	80 93 00 02 	sts	0x0200, r24
	
	UDR0 = data; 				//echo data back to PC
 3a8:	80 83       	st	Z, r24

		if(data == 0x38) //ASCII value of 8
 3aa:	88 33       	cpi	r24, 0x38	; 56
 3ac:	31 f4       	brne	.+12     	; 0x3ba <__vector_25+0x42>
		{
			
			forward();  //forward
 3ae:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <forward>
			velocity(255,255);
 3b2:	8f ef       	ldi	r24, 0xFF	; 255
 3b4:	6f ef       	ldi	r22, 0xFF	; 255
 3b6:	0e 94 b0 00 	call	0x160	; 0x160 <velocity>
		}

		if(data == 0x32) //ASCII value of 2
 3ba:	80 91 00 02 	lds	r24, 0x0200
 3be:	82 33       	cpi	r24, 0x32	; 50
 3c0:	11 f4       	brne	.+4      	; 0x3c6 <__vector_25+0x4e>
		{
			back(); //back
 3c2:	0e 94 6f 01 	call	0x2de	; 0x2de <back>
			//velocity(150,150);
		}

		if(data == 0x34) //ASCII value of 4
 3c6:	80 91 00 02 	lds	r24, 0x0200
 3ca:	84 33       	cpi	r24, 0x34	; 52
 3cc:	31 f4       	brne	.+12     	; 0x3da <__vector_25+0x62>
		{
			left();  //left
 3ce:	0e 94 73 01 	call	0x2e6	; 0x2e6 <left>
			velocity(170,170);
 3d2:	8a ea       	ldi	r24, 0xAA	; 170
 3d4:	6a ea       	ldi	r22, 0xAA	; 170
 3d6:	0e 94 b0 00 	call	0x160	; 0x160 <velocity>
		}

		if(data == 0x36) //ASCII value of 6
 3da:	80 91 00 02 	lds	r24, 0x0200
 3de:	86 33       	cpi	r24, 0x36	; 54
 3e0:	31 f4       	brne	.+12     	; 0x3ee <__vector_25+0x76>
		{
			right(); //right
 3e2:	0e 94 77 01 	call	0x2ee	; 0x2ee <right>
			velocity(170,170);
 3e6:	8a ea       	ldi	r24, 0xAA	; 170
 3e8:	6a ea       	ldi	r22, 0xAA	; 170
 3ea:	0e 94 b0 00 	call	0x160	; 0x160 <velocity>
		}

		if(data == 0x35) //ASCII value of 5
 3ee:	80 91 00 02 	lds	r24, 0x0200
 3f2:	85 33       	cpi	r24, 0x35	; 53
 3f4:	09 f4       	brne	.+2      	; 0x3f8 <__vector_25+0x80>
		{
			PORTA=0x00; //stop
 3f6:	12 b8       	out	0x02, r1	; 2
		}

		if(data == 0x37) //ASCII value of 7
 3f8:	80 91 00 02 	lds	r24, 0x0200
 3fc:	87 33       	cpi	r24, 0x37	; 55
 3fe:	11 f4       	brne	.+4      	; 0x404 <__vector_25+0x8c>
		{
			buzzer_on();
 400:	0e 94 a4 01 	call	0x348	; 0x348 <buzzer_on>
		}

		if(data == 0x39) //ASCII value of 9
 404:	80 91 00 02 	lds	r24, 0x0200
 408:	89 33       	cpi	r24, 0x39	; 57
 40a:	11 f4       	brne	.+4      	; 0x410 <__vector_25+0x98>
		{
			buzzer_off();
 40c:	0e 94 a8 01 	call	0x350	; 0x350 <buzzer_off>
		}
		
		if(data == 0x52) // ASCII value of R
 410:	80 91 00 02 	lds	r24, 0x0200
 414:	82 35       	cpi	r24, 0x52	; 82
 416:	11 f4       	brne	.+4      	; 0x41c <__vector_25+0xa4>
		{
			red_led1_on();
 418:	0e 94 0b 01 	call	0x216	; 0x216 <red_led1_on>
		}
		
		if (data == 0x72) //ASCII value of r
 41c:	80 91 00 02 	lds	r24, 0x0200
 420:	82 37       	cpi	r24, 0x72	; 114
 422:	11 f4       	brne	.+4      	; 0x428 <__vector_25+0xb0>
		{
			red_led2_on();
 424:	0e 94 56 01 	call	0x2ac	; 0x2ac <red_led2_on>
		}
		
		if (data == 0x42) // ASCII value of B
 428:	80 91 00 02 	lds	r24, 0x0200
 42c:	82 34       	cpi	r24, 0x42	; 66
 42e:	11 f4       	brne	.+4      	; 0x434 <__vector_25+0xbc>
		{
			blue_led1_on();
 430:	0e 94 29 01 	call	0x252	; 0x252 <blue_led1_on>
		}
		
		if (data == 0x62) // ASCII value of b
 434:	80 91 00 02 	lds	r24, 0x0200
 438:	82 36       	cpi	r24, 0x62	; 98
 43a:	11 f4       	brne	.+4      	; 0x440 <__vector_25+0xc8>
		{
			blue_led2_on();
 43c:	0e 94 5e 01 	call	0x2bc	; 0x2bc <blue_led2_on>
		}
		
		if (data == 0x59) //ASCII value of Y
 440:	80 91 00 02 	lds	r24, 0x0200
 444:	89 35       	cpi	r24, 0x59	; 89
 446:	11 f4       	brne	.+4      	; 0x44c <__vector_25+0xd4>
		{
			
			yellow_led1_on();
 448:	0e 94 38 01 	call	0x270	; 0x270 <yellow_led1_on>
		}			
		
		if (data == 0x79) //ASCII value of y
 44c:	80 91 00 02 	lds	r24, 0x0200
 450:	89 37       	cpi	r24, 0x79	; 121
 452:	11 f4       	brne	.+4      	; 0x458 <__vector_25+0xe0>
		{
			yellow_led2_on();
 454:	0e 94 62 01 	call	0x2c4	; 0x2c4 <yellow_led2_on>
		}
		
		if (data == 0x47)	//ASCII value of G
 458:	80 91 00 02 	lds	r24, 0x0200
 45c:	87 34       	cpi	r24, 0x47	; 71
 45e:	11 f4       	brne	.+4      	; 0x464 <__vector_25+0xec>
		{
			
			green_led1_on();
 460:	0e 94 1a 01 	call	0x234	; 0x234 <green_led1_on>
		}
		
		if (data == 0x67) //ASCII value of g
 464:	80 91 00 02 	lds	r24, 0x0200
 468:	87 36       	cpi	r24, 0x67	; 103
 46a:	11 f4       	brne	.+4      	; 0x470 <__vector_25+0xf8>
		{
			green_led2_on();
 46c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <green_led2_on>
		}
		
		if (data== 0x4F) //ASCII value of O
 470:	80 91 00 02 	lds	r24, 0x0200
 474:	8f 34       	cpi	r24, 0x4F	; 79
 476:	11 f4       	brne	.+4      	; 0x47c <__vector_25+0x104>
		{
			 led1_off();
 478:	0e 94 47 01 	call	0x28e	; 0x28e <led1_off>
		}
					
		if (data== 0x6F) //ASCII value of o
 47c:	80 91 00 02 	lds	r24, 0x0200
 480:	8f 36       	cpi	r24, 0x6F	; 111
 482:	11 f4       	brne	.+4      	; 0x488 <__vector_25+0x110>
		{
			led2_off();
 484:	0e 94 66 01 	call	0x2cc	; 0x2cc <led2_off>
		}
		if (data == 0x41) // ASCII value of A
 488:	80 91 00 02 	lds	r24, 0x0200
 48c:	81 34       	cpi	r24, 0x41	; 65
 48e:	31 f4       	brne	.+12     	; 0x49c <__vector_25+0x124>
		{
			fast_left();
 490:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <fast_left>
			velocity(255,255);
 494:	8f ef       	ldi	r24, 0xFF	; 255
 496:	6f ef       	ldi	r22, 0xFF	; 255
 498:	0e 94 b0 00 	call	0x160	; 0x160 <velocity>
		}
		
		if (data == 0x44)// ASCII value of D
 49c:	80 91 00 02 	lds	r24, 0x0200
 4a0:	84 34       	cpi	r24, 0x44	; 68
 4a2:	31 f4       	brne	.+12     	; 0x4b0 <__vector_25+0x138>
		{
			fast_right();
 4a4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <fast_right>
			velocity(255,255);
 4a8:	8f ef       	ldi	r24, 0xFF	; 255
 4aa:	6f ef       	ldi	r22, 0xFF	; 255
 4ac:	0e 94 b0 00 	call	0x160	; 0x160 <velocity>
		}
}
 4b0:	ff 91       	pop	r31
 4b2:	ef 91       	pop	r30
 4b4:	bf 91       	pop	r27
 4b6:	af 91       	pop	r26
 4b8:	9f 91       	pop	r25
 4ba:	8f 91       	pop	r24
 4bc:	7f 91       	pop	r23
 4be:	6f 91       	pop	r22
 4c0:	5f 91       	pop	r21
 4c2:	4f 91       	pop	r20
 4c4:	3f 91       	pop	r19
 4c6:	2f 91       	pop	r18
 4c8:	0f 90       	pop	r0
 4ca:	0b be       	out	0x3b, r0	; 59
 4cc:	0f 90       	pop	r0
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	0f 90       	pop	r0
 4d2:	1f 90       	pop	r1
 4d4:	18 95       	reti

000004d6 <init_devices>:


//Function To Initialize all The Devices
void init_devices()
{
 cli(); //Clears the global interrupts
 4d6:	f8 94       	cli
 port_init();  //Initializes all the ports
 4d8:	0e 94 97 01 	call	0x32e	; 0x32e <port_init>
 uart0_init(); //Initailize UART1 for serial communiaction
 4dc:	0e 94 ac 01 	call	0x358	; 0x358 <uart0_init>
 timer5_init();
 4e0:	0e 94 95 00 	call	0x12a	; 0x12a <timer5_init>
 timer1_init();
 4e4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <timer1_init>
 sei();   //Enables the global interrupts
 4e8:	78 94       	sei
}
 4ea:	08 95       	ret

000004ec <main>:

//Main Function
int main(void)
{
	init_devices();
 4ec:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <init_devices>
	led1_off();
 4f0:	0e 94 47 01 	call	0x28e	; 0x28e <led1_off>
	led2_off();
 4f4:	0e 94 66 01 	call	0x2cc	; 0x2cc <led2_off>
 4f8:	ff cf       	rjmp	.-2      	; 0x4f8 <main+0xc>

000004fa <_exit>:
 4fa:	f8 94       	cli

000004fc <__stop_program>:
 4fc:	ff cf       	rjmp	.-2      	; 0x4fc <__stop_program>
